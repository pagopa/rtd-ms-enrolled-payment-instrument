# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: 'executeBuild'
    displayName: 'Launch maven and docker build'
    type: boolean
    default: true

trigger:
  branches:
    include:
      - develop
      - uat
#      - main
  paths:
    include:
      - src/*
      - pom.xml

pr: none

resources:
  - repo: self

variables:

  vmImageNameDefault: 'ubuntu-latest'

  imageRepository: '$(K8S_IMAGE_REPOSITORY_NAME)'
  deployNamespace: '$(DEPLOY_NAMESPACE)'
  helmReleaseName : '$(HELM_RELEASE_NAME)'
  settingsXmlROsecureFileName: '$(SETTINGS_XML_RO_SECURE_FILE_NAME)'
  settingsXmlSecureFileName: '$(SETTINGS_XML_RO_SECURE_FILE_NAME)'
  canDeploy: true

  # If the branch is develop or a feature branch starting with CEN, deploy in DEV environment
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/develop') }}:
    environment: 'DEV'
    componentTest: true
    postmanEnvFile: 'rtd_dev.postman_environment.json'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)

  ${{ elseif startsWith(variables['Build.SourceBranch'], 'refs/heads/uat') }}:
    environment: 'UAT'
    componentTest: true
    postmanEnvFile: 'rtd_uat.postman_environment.json'
    dockerRegistryServiceConnection: '$(UAT_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(UAT_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(UAT_AGENT_POOL)

#  ${{ elseif or(startsWith(variables['Build.SourceBranch'], 'refs/heads/main'), eq(parameters.ENV, 'PROD')) }}:
#    environment: 'PROD'
#    dockerRegistryServiceConnection: '$(PROD_CONTAINER_REGISTRY_SERVICE_CONN)'
#    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
#    containerRegistry: '$(PROD_CONTAINER_REGISTRY_NAME)'
#    selfHostedAgentPool: $(PROD_AGENT_POOL)

  ${{ else }}:
    environment: 'DEV'
    componentTest: true
    postmanEnvFile: 'rtd_dev.postman_environment.json'
    dockerRegistryServiceConnection: '$(DEV_CONTAINER_REGISTRY_SERVICE_CONN)'
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
    containerRegistry: '$(DEV_CONTAINER_REGISTRY_NAME)'
    selfHostedAgentPool: $(DEV_AGENT_POOL)

stages:
  - stage: 'pom_version'
    displayName: Release
    condition: eq(variables.canDeploy, true)
    jobs:
      - job: POM
        displayName: POM
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            condition: and(succeeded(), eq(variables.canDeploy, true))
            inputs:
              targetType: 'inline'
              script: |
                version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
              failOnStderr: true

  - stage: 'build'
    displayName: 'Build_and_Publish_to_${{ variables.environment }}'
    dependsOn: 'pom_version'
    variables:
      pomversion: $[ stageDependencies.Release.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: Docker@2
            condition: and(succeeded(), ${{ parameters.executeBuild }})
            displayName: 'Publish_image_to_${{ variables.environment }}'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion)
  - stage: 'publish_artifact_helm'
    displayName: 'Publish_artifact_Helm'
    dependsOn: ['build']
    jobs:
      - job: Publish_artifact_helm
        displayName: Publish_artifact_helm
        pool:
          vmImage: $(vmImageNameDefault)
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/helm/rtd'
              artifact: 'helm'
              publishLocation: 'pipeline'

  - stage: 'deploy'
    displayName: 'Deploy to ${{ variables.environment }} K8S'
    dependsOn: ['publish_artifact_helm']
    condition: and(succeeded(), eq(variables.canDeploy, true))
    variables:
      pomversion: $[ stageDependencies.Release.POM.outputs['getpomversion.outputpomversion'] ]
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm/rtd'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: Bash@3
                  name: helm_template
                  displayName: Helm template
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm/rtd'
                    targetType: 'inline'
                    script: |
                      helm template . -f values-${{ lower(variables.environment) }}.yaml
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm/rtd
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(Pipeline.Workspace)/helm/rtd/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m00s --debug"
                - task: KubernetesManifest@0
                  displayName: Patch with BuildId
                  inputs:
                    kubernetesServiceConnection: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    action: patch
                    kind: deployment
                    name: '$(helmReleaseName)-microservice-chart'
                    mergeStrategy: strategic
                    patch: '{"spec":{"template":{"metadata":{"annotations":{"buildNumber":"$(Build.BuildId)"}}}}}'

  - stage: 'Component_Test'
    displayName: 'Component test on ${{ variables.environment }}'
    dependsOn: [ 'deploy' ]
    condition: eq(variables.componentTest, true)
    jobs:
      - job: 'Run_Postman_collection_on_${{ variables.environment }}'
        displayName: 'Run Postman collection on ${{ variables.environment }}'
        pool:
          name: $(selfHostedAgentPool)
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
          - task: Npm@1
            displayName: Install newman
            inputs:
              command: custom
              customCommand: install -g newman
          - task: DownloadSecureFile@1
            displayName: 'download postman environment'
            name: postman_env
            inputs:
              secureFile: $(postmanEnvFile)
          - task: CmdLine@2
            displayName: Run newman
            continueOnError: true # Useful to avoid the skipping of result publishing task
            inputs:
              script: newman run postman/enrolled_pim.postman_collection.json -e $(postman_env.secureFilePath) --reporters cli,junit --reporter-junit-export result/test-result.xml
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/test-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)/result/'
              testRunTitle: 'Publish Newman Test Results'